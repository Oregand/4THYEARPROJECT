'''
class CarzonePipeline(object):
    def __init__(self):
        self.csvwriter = csv.writer(open('carData3.csv', 'wb'))

    def process_item(self, item, car2):
        self.csvwriter.writerow(
            [item['title'][0], item['link'][0], item['price'][0], item['carYear'][0], item['location'][0],
             item['mileage'][0], item['engine'][0]])
        return item


class CarzonePipeline2(object):
    def __init__(self):
        self.carCSV = csv.writer(open('carData2.csv', 'wb'))
        self.carCSV.writerow(['title', 'link', 'price', 'carYear', 'location', 'mileage', 'engine'])

    def process_item(self, item, spider):
        self.carCSV.writerow(
            [item['title'], item['link'], item['price'], item['carYear'], item['location'], item['mileage'],
             item['engine']])
        return item
'''

'''
class FilterWordsPipeline(object):
    """A pipeline for filtering out items which contain certain words in their
    description"""

    # put all words in lowercase
    words_to_filter = ['(141)', '(142)']

    def process_item(self, item, spider):
        for word in self.words_to_filter:
            desc = item.get('description') or ''
            if word in desc.lower():
                raise DropItem("Contains forbidden word: %s" % word)
        else:
            return item


class RequiredFieldsPipeline(object):
    """A pipeline to ensure the item have the required fields."""

    required_fields = ('title', 'link', 'price', 'carYear', 'location', 'mileage', 'engine')

    def process_item(self, item, spider):
        for field in self.required_fields:
            if not item.get(field):
                raise DropItem("Field '%s' missing: %r" % (field, item))
        return item


class EmptyItemPipeline(object):
    def process_item(self, item, spider):
        if item['handicap']:
            return item
        else:
            item['handicap'] = '99'
            return item


class MySQLStorePipeline33(object):
    def __init__(self, dbpool):
        self.dbpool = dbpool

    @classmethod
    def from_settings(cls, settings):
        dbargs = dict(
            host=settings['localhost'],
            db=settings['database'],
            user=settings['username'],
            passwd=settings['password'],
            charset='utf8',
            use_unicode=True,
        )
        dbpool = adbapi.ConnectionPool('MySQLdb', **dbargs)
        return cls(dbpool)

    def process_item(self, item, spider):
        # run db query in the thread pool
        d = self.dbpool.runInteraction(self._do_upsert, item, spider)
        d.addErrback(self._handle_error, item, spider)
        # at the end return the item in case of success or failure
        d.addBoth(lambda _: item)
        # return the deferred instead the item. This makes the engine to
        # process next item (according to CONCURRENT_ITEMS setting) after this
        # operation (deferred) has finished.
        return d

    def _do_upsert(self, conn, item, spider):

        conn.execute("""SELECT EXISTS(
                SELECT 1 FROM tblHandicaps WHERE Player = %s)""", (item['name'][0]))
        ret = conn.fetchone()[0]

        if ret:
            conn.execute("""
                UPDATE tblHandicaps
                SET Player=%s, Handicap=%s, Exact=%s, Category=%s, Updated
                WHERE Player=%s
            """, (item['name'][0], item['handicap'][0], item['exact'][0], item['category'][0], datetime.now(),
                  item['name'][0]))
            spider.log("Item updated in db: %s %r" % (item['name'][0], item))
        else:
            conn.execute(
                """INSERT INTO tblHandicaps (Player, Handicap, Exact, Category, Sex, Updated) VALUES (%s, %s, %s, %s, 'M', %s)""",
                (item['name'][0],
                 item['handicap'][0],
                 item['exact'][0],
                 item['category'][0],
                 datetime.now()))

            spider.log("Item stored in db: %s %r" % (item['name'][0], item))

    def _handle_error(self, failure, item, spider):
        """Handle occurred on db interaction."""
        # do nothing, just log
        log.err(failure)
'''


            #self.cursor.execute("""DROP TABLE IF EXISTS testHonda2""")
            #self.cursor.execute("""CREATE TABLE testHonda2 IF NOT EXISTS (Id INT PRIMARY KEY AUTO_INCREMENT, \
            #     title TEXT, link TEXT, carYear TEXT, location TEXT, mileage TEXT, engine TEXT, price TEXT""")